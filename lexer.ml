# 1 "lexer.mll"
 
 open Parser
let num_line = ref 1
let debug = false
let hash_string_tokens = Hashtbl.create 10
let _ =
  let lst_string_tokens =
    [ "bool",  T_bool  ;
      "else",  T_else  ;
      "false", T_false ;
      "fst",   T_fst   ;
      "fun",   T_fun   ;
      "if",    T_if    ;
      "in",    T_in    ;
      "int",   T_int   ;
      "let",   T_let   ;
      "not",   T_not   ;
      "rec",   T_rec   ;
      "snd",   T_snd   ;
      "then",  T_then  ;
      "true",  T_true
    ] in
  List.iter (fun (str, tok) -> Hashtbl.add hash_string_tokens str tok)
    lst_string_tokens
let retrieve_string_tok (s: string) =
  if debug then Printf.printf "string: %s\n" s;
  try Hashtbl.find hash_string_tokens s
  with Not_found -> V_string s

# 32 "lexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\238\255\239\255\240\255\242\255\243\255\001\000\001\000\
    \247\255\001\000\249\255\250\255\075\000\085\000\012\000\254\255\
    \001\000\255\255\001\000\253\255\241\255\245\255\244\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\007\000\255\255\255\255\004\000\003\000\009\000\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\000\000\000\000\000\000\000\000\000\000\255\255\255\255\
    \000\000\255\255\000\000\000\000\255\255\255\255\255\255\000\000\
    \255\255\000\000\018\000\000\000\000\000\000\000\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\017\000\015\000\019\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \017\000\000\000\000\000\016\000\000\000\000\000\007\000\021\000\
    \005\000\004\000\008\000\010\000\002\000\009\000\016\000\014\000\
    \012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\003\000\018\000\006\000\011\000\022\000\020\000\
    \000\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \000\000\000\000\000\000\000\000\013\000\000\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\255\255\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\018\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\000\000\255\255\255\255\000\000\007\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\014\000\000\000\000\000\006\000\009\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\012\000\012\000\012\000\012\000\012\000\
    \012\000\012\000\012\000\012\000\012\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \255\255\255\255\255\255\255\255\013\000\255\255\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \013\000\013\000\013\000\013\000\013\000\013\000\013\000\013\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\018\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 32 "lexer.mll"
                          ( token lexbuf )
# 155 "lexer.ml"

  | 1 ->
# 33 "lexer.mll"
                          ( incr num_line; token lexbuf )
# 160 "lexer.ml"

  | 2 ->
# 36 "lexer.mll"
                          ( incr num_line; token lexbuf )
# 165 "lexer.ml"

  | 3 ->
# 39 "lexer.mll"
                          ( let str = Lexing.lexeme lexbuf in
                            retrieve_string_tok str )
# 171 "lexer.ml"

  | 4 ->
# 41 "lexer.mll"
                          ( let str = Lexing.lexeme lexbuf in
                            V_int (int_of_string str) )
# 177 "lexer.ml"

  | 5 ->
# 44 "lexer.mll"
                          ( if debug then Printf.printf "equal\n"; T_equal )
# 182 "lexer.ml"

  | 6 ->
# 45 "lexer.mll"
                          ( T_add )
# 187 "lexer.ml"

  | 7 ->
# 46 "lexer.mll"
                          ( T_sub )
# 192 "lexer.ml"

  | 8 ->
# 47 "lexer.mll"
                          ( T_mul )
# 197 "lexer.ml"

  | 9 ->
# 48 "lexer.mll"
                          ( T_div )
# 202 "lexer.ml"

  | 10 ->
# 49 "lexer.mll"
                          ( T_and )
# 207 "lexer.ml"

  | 11 ->
# 50 "lexer.mll"
                          ( T_leq )
# 212 "lexer.ml"

  | 12 ->
# 52 "lexer.mll"
                          ( T_lpar )
# 217 "lexer.ml"

  | 13 ->
# 53 "lexer.mll"
                          ( T_rpar )
# 222 "lexer.ml"

  | 14 ->
# 55 "lexer.mll"
                          ( T_arrow )
# 227 "lexer.ml"

  | 15 ->
# 57 "lexer.mll"
                          ( if debug then Printf.printf "colon\n"; T_colon )
# 232 "lexer.ml"

  | 16 ->
# 58 "lexer.mll"
                          ( T_comma )
# 237 "lexer.ml"

  | 17 ->
# 60 "lexer.mll"
                          ( T_eof )
# 242 "lexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

